#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FacadeLearning.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LearningFacade_DB")]
	public partial class FacadeLearning_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblContactType(tblContactType instance);
    partial void UpdatetblContactType(tblContactType instance);
    partial void DeletetblContactType(tblContactType instance);
    partial void InserttblContactNumber(tblContactNumber instance);
    partial void UpdatetblContactNumber(tblContactNumber instance);
    partial void DeletetblContactNumber(tblContactNumber instance);
    #endregion
		
		public FacadeLearning_DBDataContext() : 
				base(global::FacadeLearning.DAL.Properties.Settings.Default.LearningFacade_DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FacadeLearning_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FacadeLearning_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FacadeLearning_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FacadeLearning_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblContactType> tblContactTypes
		{
			get
			{
				return this.GetTable<tblContactType>();
			}
		}
		
		public System.Data.Linq.Table<tblContactNumber> tblContactNumbers
		{
			get
			{
				return this.GetTable<tblContactNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Name;
		
		private EntitySet<tblContactNumber> _tblContactNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblUser()
		{
			this._tblContactNumbers = new EntitySet<tblContactNumber>(new Action<tblContactNumber>(this.attach_tblContactNumbers), new Action<tblContactNumber>(this.detach_tblContactNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblContactNumber", Storage="_tblContactNumbers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<tblContactNumber> tblContactNumbers
		{
			get
			{
				return this._tblContactNumbers;
			}
			set
			{
				this._tblContactNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblContactNumbers(tblContactNumber entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblContactNumbers(tblContactNumber entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblContactType")]
	public partial class tblContactType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactTypeId;
		
		private string _ContactTypeName;
		
		private EntitySet<tblContactNumber> _tblContactNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactTypeIdChanging(int value);
    partial void OnContactTypeIdChanged();
    partial void OnContactTypeNameChanging(string value);
    partial void OnContactTypeNameChanged();
    #endregion
		
		public tblContactType()
		{
			this._tblContactNumbers = new EntitySet<tblContactNumber>(new Action<tblContactNumber>(this.attach_tblContactNumbers), new Action<tblContactNumber>(this.detach_tblContactNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactTypeId
		{
			get
			{
				return this._ContactTypeId;
			}
			set
			{
				if ((this._ContactTypeId != value))
				{
					this.OnContactTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeId = value;
					this.SendPropertyChanged("ContactTypeId");
					this.OnContactTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactTypeName", DbType="VarChar(200)")]
		public string ContactTypeName
		{
			get
			{
				return this._ContactTypeName;
			}
			set
			{
				if ((this._ContactTypeName != value))
				{
					this.OnContactTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ContactTypeName = value;
					this.SendPropertyChanged("ContactTypeName");
					this.OnContactTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblContactType_tblContactNumber", Storage="_tblContactNumbers", ThisKey="ContactTypeId", OtherKey="ContactNumberTypeId")]
		public EntitySet<tblContactNumber> tblContactNumbers
		{
			get
			{
				return this._tblContactNumbers;
			}
			set
			{
				this._tblContactNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblContactNumbers(tblContactNumber entity)
		{
			this.SendPropertyChanging();
			entity.tblContactType = this;
		}
		
		private void detach_tblContactNumbers(tblContactNumber entity)
		{
			this.SendPropertyChanging();
			entity.tblContactType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblContactNumber")]
	public partial class tblContactNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactNumberId;
		
		private System.Nullable<int> _ContactNumberTypeId;
		
		private System.Nullable<int> _UserId;
		
		private string _ContactNumber;
		
		private EntityRef<tblContactType> _tblContactType;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactNumberIdChanging(int value);
    partial void OnContactNumberIdChanged();
    partial void OnContactNumberTypeIdChanging(System.Nullable<int> value);
    partial void OnContactNumberTypeIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    #endregion
		
		public tblContactNumber()
		{
			this._tblContactType = default(EntityRef<tblContactType>);
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactNumberId
		{
			get
			{
				return this._ContactNumberId;
			}
			set
			{
				if ((this._ContactNumberId != value))
				{
					this.OnContactNumberIdChanging(value);
					this.SendPropertyChanging();
					this._ContactNumberId = value;
					this.SendPropertyChanged("ContactNumberId");
					this.OnContactNumberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumberTypeId", DbType="Int")]
		public System.Nullable<int> ContactNumberTypeId
		{
			get
			{
				return this._ContactNumberTypeId;
			}
			set
			{
				if ((this._ContactNumberTypeId != value))
				{
					if (this._tblContactType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactNumberTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContactNumberTypeId = value;
					this.SendPropertyChanged("ContactNumberTypeId");
					this.OnContactNumberTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="VarChar(500)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblContactType_tblContactNumber", Storage="_tblContactType", ThisKey="ContactNumberTypeId", OtherKey="ContactTypeId", IsForeignKey=true)]
		public tblContactType tblContactType
		{
			get
			{
				return this._tblContactType.Entity;
			}
			set
			{
				tblContactType previousValue = this._tblContactType.Entity;
				if (((previousValue != value) 
							|| (this._tblContactType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblContactType.Entity = null;
						previousValue.tblContactNumbers.Remove(this);
					}
					this._tblContactType.Entity = value;
					if ((value != null))
					{
						value.tblContactNumbers.Add(this);
						this._ContactNumberTypeId = value.ContactTypeId;
					}
					else
					{
						this._ContactNumberTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblContactType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblContactNumber", Storage="_tblUser", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblContactNumbers.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblContactNumbers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
